{"data":{"site":{"siteMetadata":{"author":"Peter Leontev","title":"Peter Leontev - Generalist Programmer","disqusID":"peterleontev"}},"mdx":{"id":"0e3d58d8-7114-571e-8ff6-599f6a8823c9","excerpt":"Imagine the following situation in Unreal Engine 4 gameplay code: SoundSystem  can be invalid but what does that mean? Is it OK situation to just use IsValidâ€¦","code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Handling invalid Unreal Engine 4 C++ pointers\",\n  \"date\": \"2019-04-21T16-00\",\n  \"description\": \"In this article I will briefly explain approaches to check if a pointer is valid and why it is important.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Imagine the following situation in Unreal Engine 4 gameplay code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"APlayer::OnAttacked()\\n{\\n    USoundSystem* SoundSystem = GameInstance->GetSoundSystem();\\n    if (IsValid(SoundSystem))\\n    {\\n        SoundSystem->PlaySoundCue(OnAttackedSoundCue);\\n    }\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"SoundSystem\"), \" can be invalid but what does that mean? Is it OK situation to just use IsValid() and do nothing otherwise? This issue is more interesting that it seems.\"), mdx(\"p\", null, \"Good question to start with is if \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"SoundSystem\"), \" is not valid in OnAttacked() context then maybe we should tell someone about it? To do that one can use multiple methods: return values, delegates calling, writing some error message to log... but wait! \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"SoundSystem\"), \" is not valid! \"), mdx(\"p\", null, \"When a game system is not valid then what do we can to do? Well, let's get an instance of that system because it should be created already, right? \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"APlayer::OnAttacked()\\n{\\n    USoundSystem* SoundSystem = nullptr;\\n    if (!IsValid(SoundSystem))\\n    {\\n        SoundSystem = GameInstance->GetSoundSystem();\\n    }\\n\\n    SoundSystem->PlaySoundCue(OnAttackedSoundCue);\\n}\\n\")), mdx(\"p\", null, \"But should we use IsValid() again just to be sure SoundSystem we've got is valid? It seems like we are going to have a infinite loop here.\"), mdx(\"p\", null, \"Another way to fix this problem is to put SoundSystem initialization into APlayer method that can guarantee SoundSystem is initialized:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"class APlayer : AActor\\n{\\n    ...\\nprivate:\\n    UPROPERTY()\\n    USoundSystem* SoundSystem;\\n};\\n\\nAPlayer::APlayer()\\n{\\n    SoundSystem = nullptr;\\n}\\n\\nAPlayer::PostSoundSystemInitialize()\\n{\\n    SoundSystem = GameInstance->GetSoundSystem();\\n}\\n\\nAPlayer::OnAttacked()\\n{\\n    if (IsValid(SoundSystem))\\n    {\\n        SoundSystem->PlaySoundCue(OnAttackedSoundCue);\\n    }\\n}\\n};\\n\")), mdx(\"p\", null, \"Notice that we fixed our issue with checking SoundSystem pointer in OnAttacked() method but still don't know what to do if it is somehow invalid.\"), mdx(\"p\", null, \"Additional question is what if we don't want to store SoundSystem pointer in APlayer? Imagine one has AEnemy, AEnemyTank, AEnemyTower instead of only APlayer and all those classes have to have ability to play sound cue.\"), mdx(\"p\", null, \"I think good solution is to divide all pointer checks into \\\"soft\\\" and \\\"hard\\\" ones. Soft check is when a program can continue execution. Hard one is when we tell a program to stop the execution.\"), mdx(\"p\", null, \"In our case we need \\\"hard\\\" check of SoundSystem pointer because otherwise that means something is totally wrong with game systems initialization process.\"), mdx(\"p\", null, \"How to do \\\"hard\\\" checks in Unreal Engine 4 C++? There are many ways according to official \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.google.comhttps://docs.unrealengine.com/en-us/Programming\"\n  }), \"documentation\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"* check\\n* checkf\\n* verify\\n* verifyf\\n* checkSlow\\n* checkfSlow\\n* verifySlow\\n\")), mdx(\"p\", null, \"Any of above macroses will halt the execution of the program and that is exactly what we need! \"), mdx(\"p\", null, \"Result:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"APlayer::OnAttacked()\\n{\\n    USoundSystem* SoundSystem = GameInstance->GetSoundSystem();\\n    check(SoundSystem); // or check(IsValid(SoundSystem))\\n\\n    SoundSystem->PlaySoundCue(OnAttackedSoundCue);\\n}\\n\")), mdx(\"p\", null, \"As a conclusion I will also say that default engine macroses checkSlow, checkfSlow, verifySlow are especially good if you need to check a pointer only in a debug version of your code. \"));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"Handling invalid Unreal Engine 4 C++ pointers","date":"April 21, 2019","description":"In this article I will briefly explain approaches to check if a pointer is valid and why it is important."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/c++_pointers/","previous":{"fields":{"slug":"/blog/motivation/"},"frontmatter":{"date":"2019-04-19T15-00","title":"Technical blog in 2019?"}},"next":null}}