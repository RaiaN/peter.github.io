{"data":{"site":{"siteMetadata":{"author":"Peter Leontev","title":"Peter Leontev - Generalist Programmer","disqusID":"peterleontev"}},"mdx":{"id":"a5ce4c62-fe13-556a-b7b8-d3384b00202e","excerpt":"When you write  Cast<T > (SomeObject)  in Unreal C++, is it any different to dynamic_cast<T >  in plain C++? Absolutely. Unreal Engine C++ provides a built-inâ€¦","code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How Cast function works in Unreal Engine 4?\",\n  \"date\": \"2019-09-20\",\n  \"description\": \"And is it any better than dynamic_cast?\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When you write \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Cast<T\", \">\", \"(SomeObject)\"), \" in Unreal C++, is it any different to dynamic_cast<T\", \">\", \" in plain C++? Absolutely.\"), mdx(\"p\", null, \"Unreal Engine C++ provides a built-in support for \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.unrealengine.com/en-US/blog/unreal-property-system-reflection\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"reflection system\")), \" which gives one a way to perform casts without a need to use dynamic_cast<T\", \">\", \" at all! Lets figure out how Cast<T\", \">\", \" works under hood!\"), mdx(\"p\", null, \"Function \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Cast<T\", \">\"), \" itself is straightforward: \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"template <typename To, typename From>\\nFORCEINLINE To* Cast(From* Src)\\n{\\n    return TCastImpl<From, To>::DoCast(Src);\\n}\\n\")), mdx(\"p\", null, \"As you can see, it simply uses some template structure called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"TCastImpl\"), \" to convert a pointer of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"From\"), \" class to the pointer of class \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"To\"), \". Indeed, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"TCastImpl\"), \" is where all the magic happens so lets look at it!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"template <typename From, typename To, ECastType CastType = TGetCastType<From, To>::Value>\\nstruct TCastImpl\\n{\\n    // This is the cast flags implementation\\n    FORCEINLINE static To* DoCast( UObject* Src )\\n    {\\n        return Src && Src->GetClass()->HasAnyCastFlag(TCastFlags<To>::Value) ? (To*)Src : nullptr;\\n    }\\n\\n    FORCEINLINE static To* DoCastCheckedWithoutTypeCheck( UObject* Src )\\n    {\\n        return (To*)Src;\\n    }\\n};\\n\")), mdx(\"p\", null, \"DoCast either applies C-style cast to a valid pointer of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"From\"), \" class to convert it to the pointer of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"To\"), \" class or returns nullptr (note that dynamic_cast<T\", \">\", \" is neved considered when using a C-style cast). This way both const and non-const pointers will be handed correctly. So far, so good. But what about the call to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"HasAnyCastFlag()\"), \" function in \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"DoCast\"), \" body? Does it have any performance cost?\"));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"How Cast function works in Unreal Engine 4?","date":"September 20, 2019","description":"And is it any better than dynamic_cast?"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/unreal_cast/","previous":{"fields":{"slug":"/blog/level_streaming_optimization/"},"frontmatter":{"date":"2019-06-19","title":"Level Streaming And Garbage Collection Optimization Tweaks In Unreal Engine 4"}},"next":null}}